name: 'Terraform Pull Request Task'

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform Version to be used'
        required: true
        type: string

permissions: write-all
  #id-token: write 
  #contents: read
  #pull-requests: write
  #issues: write
  
jobs:
  terraform-pull-request:
    name: 'Terraform Pull Request'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Getting Branch
      id: getting-branch
      run: |
        #echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_ENV"
        echo "BRANCH_NAME=${{ github.event.pull_request.base.ref }}" >> "$GITHUB_ENV"  
        
        
    - name: Preparing Variables
      id: prep-vars
      run: |
        echo "The target branch is: ${{ env.BRANCH_NAME }}"
        echo "TF_KEY_STATE=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
        echo "GITHUB_REPO=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
        
        if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "working on Prod"
            echo "TF_VAR_environment=prod" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZ_SUBSCRIPTION_ID_PROD }}" >> $GITHUB_ENV
            echo "TF_STATE_SA=${{ vars.TF_STATE_SA_PROD }}" >> $GITHUB_ENV
            echo "TF_CONTAINER_NAME=${{ vars.TF_CONTAINER_NAME_PROD }}" >> $GITHUB_ENV
            echo "TF_RG_NAME=${{ vars.TF_STATE_RG_PROD }}" >> $GITHUB_ENV
        else
            echo "working on Dev"
            echo "TF_VAR_environment=dev" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZ_SUBSCRIPTION_ID_DEV }}" >> $GITHUB_ENV
            echo "TF_STATE_SA=${{ vars.TF_STATE_SA_DEV }}" >> $GITHUB_ENV
            echo "TF_CONTAINER_NAME=${{ vars.TF_CONTAINER_NAME_DEV }}" >> "$GITHUB_ENV"
            echo "TF_RG_NAME=${{ vars.TF_STATE_RG_DEV }}" >> $GITHUB_ENV
        fi
      shell: bash
      
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZ_CLIENT_ID }}","clientSecret":"${{ secrets.AZ_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZ_TENANT_ID }}"}'

    - name: Terraform Init
      id: tf-init
      run: |
        terraform init -backend-config=storage_account_name=${{ env.TF_STATE_SA }} \
          -backend-config=container_name=${{ env.TF_CONTAINER_NAME }} \
          -backend-config=resource_group_name=${{ env.TF_RG_NAME }} \
          -backend-config=key="${{ env.TF_KEY_STATE }}" \
          -backend-config=subscription_id=${{ env.ARM_SUBSCRIPTION_ID }} \
          -backend-config=tenant_id=${{ secrets.AZ_TENANT_ID }} \
          -backend-config=client_id=${{ secrets.AZ_CLIENT_ID }} \
          -backend-config=client_secret=${{ secrets.AZ_CLIENT_SECRET }}
  
    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate -no-color

    - name: Terraform Plan
      id: tf-plan
      continue-on-error: true
      run: |
        mkdir -p terraform-plan/${{ env.GITHUB_REPO }}
        terraform plan -no-color -out terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.tfplan || exit 1
        terraform show -no-color terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.tfplan  > terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.txt
        echo "PLAN<<EOF" >> $GITHUB_OUTPUT
        echo "$(cat terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.txt)">> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Comment Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.tf-plan.outputs.PLAN }}"
      with:
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
          })
          // 2. Prepare format of the comment

          const output = `#### Terraform Plan üñå ü§ñ ‚öôÔ∏è üìñ  \`${{ steps.tf-plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}*`;

          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }


        




        
