name: 'Terraform Apply Tasks'

on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform Version to be used'
        required: true
        type: string
      apply:
        description: Apply Terraform infraestructure
        type: boolean
        required: false
        default: false
      destroy:
        description: Destroy Terraform infraestructure
        type: string
        required: false
        default: no

permissions:
  id-token: write 
  contents: read
  pull-requests: write
  issues: write
  
jobs:
  terraform-apply-tasks:
    name: 'Terraform Apply Task'
    runs-on: ubuntu-latest
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Getting Branch
      id: getting-branch
      run: |
        echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_ENV"
        
    - name: Preparing Variables
      id: prep-vars
      run: |
        echo "TF_KEY_STATE=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
        echo "GITHUB_REPO=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
        echo "The target branch is: ${{ env.BRANCH_NAME }}"
        if [ "${{ env.BRANCH_NAME }}" = "main" ]; then
            echo "working on Prod"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZ_SUBSCRIPTION_ID_PROD }}" >> $GITHUB_ENV
            echo "TF_STATE_SA=${{ vars.TF_STATE_SA_PROD }}" >> $GITHUB_ENV
            echo "TF_CONTAINER_NAME=${{ vars.TF_CONTAINER_NAME_PROD }}" >> $GITHUB_ENV
            echo "TF_RG_NAME=${{ vars.TF_STATE_RG_PROD }}" >> $GITHUB_ENV
        else
            echo "working on Dev"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZ_SUBSCRIPTION_ID_DEV }}" >> $GITHUB_ENV
            echo "TF_STATE_SA=${{ vars.TF_STATE_SA_DEV }}" >> $GITHUB_ENV
            echo "TF_CONTAINER_NAME=${{ vars.TF_CONTAINER_NAME_DEV }}" >> "$GITHUB_ENV"
            echo "TF_RG_NAME=${{ vars.TF_STATE_RG_DEV }}" >> $GITHUB_ENV
        fi
      shell: bash
      
    - uses: Azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZ_CLIENT_ID }}","clientSecret":"${{ secrets.AZ_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZ_TENANT_ID }}"}'

    - name: Terraform Init
      id: tf-init
      run: |
        terraform init -backend-config=storage_account_name=${{ env.TF_STATE_SA }} \
          -backend-config=container_name=${{ env.TF_CONTAINER_NAME }} \
          -backend-config=resource_group_name=${{ env.TF_RG_NAME }} \
          -backend-config=key="${{ env.TF_KEY_STATE }}" \
          -backend-config=subscription_id=${{ env.ARM_SUBSCRIPTION_ID }} \
          -backend-config=tenant_id=${{ secrets.AZ_TENANT_ID }} \
          -backend-config=client_id=${{ secrets.AZ_CLIENT_ID }} \
          -backend-config=client_secret=${{ secrets.AZ_CLIENT_SECRET }}
  
    # - name: Terraform Validate
    #   id: validate
    #   run: terraform validate -no-color

    - name: Terraform Plan
      id: tf-plan
      #if: ${{ ! github.event.inputs.destroy }}
      continue-on-error: true
      run: |
        mkdir -p terraform-plan/${{ env.GITHUB_REPO }}
        terraform plan -no-color -out terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.tfplan 
        terraform show -no-color terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.tfplan  > terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.txt
        echo "PLAN<<EOF" >> $GITHUB_OUTPUT
        echo "$(cat terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.txt)">> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Terraform Apply
      id: tf-apply
      if: ${{ github.event.inputs.apply == 'true' && github.event.inputs.destroy != 'yes'}}
      run: |
        echo "terraform apply -auto-approve  -input=false terraform-plan/${{ env.GITHUB_REPO }}/${{ env.GITHUB_REPO }}-${{ env.BRANCH_NAME }}.tfplan"
        echo "github.event.inputs.apply: ${{ github.event.inputs.apply }}"
        echo "github.event.inputs.destroy: ${{ github.event.inputs.destroy }}"



    - name: Terraform Destroy
      id: tf-destroy
      if: ${{ github.event.inputs.destroy == 'yes'}}
      run: |
        echo "terraform destroy -auto-approve "